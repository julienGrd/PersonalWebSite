@inherits LayoutComponentBase
@inject IStringLocalizer<MainLayout> L
@inject LanguageService _languageService
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService _localstorage
@inject IJSRuntime jsRuntime
@using System.Globalization;

<nav class="navbar navbar-expand-lg navbar-dark sticky-top">
    
    <div class="navbar-brand d-flex">
        <a href="/">
            <img src="images/photo.png" style="width: 60px; height: 60px" />
        </a>
        
         <div class="d-flex flex-column ms-2">
            <span class="title-menu d-flex">
                <span>Julien Gourdon&nbsp;</span>
                <span class="d-none d-sm-inline"> - Freelance</span>
            </span>
            <span class="job">@L["JobTitle"]</span>
        </div>
    </div>
    <button class="navbar-toggler me-2" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
   
    <div class="collapse navbar-collapse justify-content-end" id="navbarNavDropdown">
        <ul class="navbar-nav">
            @*<li class="nav-item" title="">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <i class="fas fa-home" aria-hidden="true"></i>&nbsp;Accueil
            </NavLink>
        </li>*@
            @* <li class="nav-item">
                <NavLink class="nav-link" href="/travel/map" Match="NavLinkMatch.All">
                    <i class="fas fa-fw fa-globe-americas" aria-hidden="true"></i>&nbsp;@L["TravelBlogMenuTitle"]
                </NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" href="/blog/development" Match="NavLinkMatch.All">
                    <i class="fas fa-fw fa-file-code" aria-hidden="true"></i>&nbsp;@L["DevelopmentBlogMenuTitle"]
                </NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" href="/resume" Match="NavLinkMatch.All">
                    <i class="fas fa-fw fa-id-card" aria-hidden="true"></i>&nbsp;@L["ResumeMenuTitle"]
                </NavLink>
            </li>
            <li class="nav-item" title="@L["ConnectMenuTitle"]">
                <NavLink class="nav-link" href="/login" Match="NavLinkMatch.All">
                    <i class="fas fa-fw fa-user-circle" aria-hidden="true"></i>&nbsp;@L["ConnectMenuTitle"]
                </NavLink>
            </li> *@
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <img src="images/@_languageService.GetCurrentLanguage().Icon" class="fas fa-fw" title="@L["LangMenuTitle"]" />&nbsp; @GetTitleCaseNativeLanguage(_languageService.GetCurrentLanguage().CultureInfo)
                </a>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdownMenuLink">
                    @foreach(var lang in _languageService.GetDefaults())
                    {
                        <a class="dropdown-item" @onclick="@(() => UICulture = lang.CultureInfo)">
                            <img src="images/@lang.Icon" style="height: 25px;"/>&nbsp;
                            @GetTitleCaseNativeLanguage(lang.CultureInfo)
                        </a>
                    }
                </div>
            </li>
            @* <li class="nav-item" title="@L["GithubMenuTitle"]">
                <NavLink class="nav-link" href="https://github.com/julienGrd/" target="_blank" Match="NavLinkMatch.All">
                    <i class="fab fa-github" aria-hidden="true"></i>
                </NavLink>
            </li> *@
        </ul>
    </div>
    
</nav>
<main role="main">
    @Body
</main>
<footer>
</footer>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {

    private static string GetTitleCaseNativeLanguage(CultureInfo culture)
    {
        //todo renvoie toujours le short en webassembly, du coup pour harmoniser on renvoie toujours le two Iso mais il faudrait utiliser le native name
        //voir https://github.com/dotnet/runtime/issues/44739
        // string nativeName = culture.IsNeutralCulture
        //     ? culture.NativeName
        //     : culture.Parent.NativeName;
        string nativeName = culture.IsNeutralCulture
            ? culture.TwoLetterISOLanguageName
            : culture.Parent.TwoLetterISOLanguageName;

        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(nativeName);
    }

    CultureInfo UICulture
    {
        get => CultureInfo.CurrentCulture;
        set
        {
            if (CultureInfo.CurrentCulture != value)
            {
                // Set the culture in LocalStorage
                _localstorage.SetItemAsync("currentcuture", value.TwoLetterISOLanguageName);

                // Load the Current URL
                //NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                ApplyLanguage(value);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await _localstorage.GetItemAsync<string>("currentcuture");

            CultureInfo culture;
            if (result != null)
                // 3.a. Set the selected Culture
                culture = new CultureInfo(result);
            else
                culture = CultureInfo.CurrentUICulture;

            ApplyLanguage(culture);
        }


        await base.OnAfterRenderAsync(firstRender);
    }

    private void ApplyLanguage(CultureInfo pCulture)
    {
        CultureInfo.CurrentCulture.ClearCachedData();

        // Set the cukture to application
        // CultureInfo.CurrentCulture = culture;
        CultureInfo.DefaultThreadCurrentCulture = pCulture;
        CultureInfo.DefaultThreadCurrentUICulture = pCulture;

        _languageService.Reload();

        jsRuntime.InvokeVoidAsync("setTitle", $"CV Julien Gourdon {System.Globalization.CultureInfo.CurrentUICulture.TwoLetterISOLanguageName}");

        this.StateHasChanged();
    }
    // protected void SetLanguage(Language l)
    // {
    //     //_languageService.SetLanguage(l);
    //     // var uri = new Uri(Navigation.Uri)
    //     //             .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
    //     // var cultureEscaped = Uri.EscapeDataString(l.Localization);
    //     // var uriEscaped = Uri.EscapeDataString(uri);

    //     // Navigation.NavigateTo(
    //     //     $"Culture/Set?culture={cultureEscaped}&redirectUri={uriEscaped}",
    //     //     forceLoad: true);

    //     // Set the culture in LocalStorage
    //     _localstorage.SetItemAsync("currentcuture", l.Name);

    //     // Load the Current URL
    //     NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    //     //this.StateHasChanged();
    // }
}
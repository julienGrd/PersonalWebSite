<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CteasyDate" xml:space="preserve">
    <value>2016-2018 (3 years)</value>
  </data>
  <data name="CteasyDescription" xml:space="preserve">
    <value>&lt;ul&gt;

&lt;li&gt;Working with client on his digital strategy. analysis of needs, costing and developments of successives
versions. I worked in association with another freelance, who dealing more with project management
and part of architecture.&lt;/li&gt;
&lt;li&gt;2016 : V3 development : Rewrited website in the CMS Umbraco and upgrade to asp .net MVC.
Developed purchase funnel in SPA logic. Developed an angularJs backend website for CTEasy
customer service. Implementation of a multi-provider planning management to take appointment
directly on the website.&lt;/li&gt;
&lt;li&gt;2017 : V4 development : Complete rewrite of the business layer for maintainability, performance and
quality of service. Sanitation of the database. Integration of payment directly in the purchase funnel.
Automatic payment of centers with generation of a daily transfer file. Traceability of all financial
transactions. Redesign log, mail and sms system. Total graphic redesign.&lt;/li&gt;
&lt;li&gt;2018 : V5 development : Complete rewrite of the logic of offers of the website by implementating
yield management logic. Algorithm for calculating the planning rendered to customers with prices
according to the yield management model associated with the center. Offline mode operation, with
synchronization of free slots and taken in the background, or by webHook fire by the planners.
Evolution of the angular back-end to be able to manipulate complex sales models associated with
each center. Opening the system to manage multiple vehicle types and energies. performance optimisation on research page for SEO reasons. New design and
ergonomy of planning selection. New design and ergonomy of purchase funnel.&lt;/li&gt;

&lt;/ul&gt;</value>
  </data>
  <data name="CteasySoftware" xml:space="preserve">
    <value>E-commerce platform</value>
  </data>
  <data name="CteasyTitle" xml:space="preserve">
    <value>Freelance, .net/web Software Developper fullstack</value>
  </data>
  <data name="GeckosDate" xml:space="preserve">
    <value>2019-2023 (5 years)</value>
  </data>
  <data name="GeckosDescription" xml:space="preserve">
    <value>&lt;ul&gt;
     &lt;li&gt;In charge of the technical migration of the software GECKOS, a management software specialized in the medical field (CMPP/CESSAD).&lt;/li&gt;
     &lt;li&gt;Stack when I arrived: Visual studio 2010, .net framework 4.0, Silverlight, Wcf, Entity Framework 5&lt;/li&gt;
     &lt;li&gt;Stack when I left: Visual studio 2022, .net 8, Blazor Server/Web assembly, CSS/SASS, REST API, Entity Framework Core 8&lt;/li&gt;
     &lt;li&gt;Work in complete autonomy and remotely, in permanent contact with the company manager.&lt;/li&gt;
     &lt;li&gt;Responsibilities: analysis and understanding of the existing system, definition of the architecture, implementation of quality standards, improvement of ergonomy, development of the entire application with the latest technologies in the web and .NET world&lt;/li&gt;
     &lt;li&gt;2019: Rewriting the Silverlight front in blazor Server/Webassembly, synchronization of C# code between applications to allow parallel use of the two applications with the same code.&lt;/li&gt;
     &lt;li&gt;2020: front finalization, still dependant of the old backend, progressive deployment to our clients&lt;/li&gt;
     &lt;li&gt;2021: Progressive attempt to port the backend to .NET 7. Various functional improvements (electronic signatures, internal messaging/email system through the application, business alert systems)&lt;/li&gt;
     &lt;li&gt;2022: Deep rewrite of the business and technical part to certify the Geckos software in SEGUR referencing (https://esante.gouv.fr/segur).&lt;/li&gt;
     &lt;li&gt;2023: Finalization of porting the entire code, removal of the old application and its support, widespread deployment, gradual improvement of the old code&lt;/li&gt;
 &lt;/ul&gt;</value>
  </data>
  <data name="GeckosSoftware" xml:space="preserve">
    <value>Software Geckos</value>
  </data>
  <data name="GeckosTitle" xml:space="preserve">
    <value>Permanent contract, .net/web Software Developper fullstack</value>
  </data>
</root>